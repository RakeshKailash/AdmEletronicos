/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admeletronicos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Desenvolvimento
 */
public class CadastroCategorias extends javax.swing.JFrame {

    /**
     * Creates new form cadastroFornecedores
     */
    public CadastroCategorias() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nomeCat = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_categorias = new javax.swing.JTable();
        btn_limparCat = new javax.swing.JButton();
        btn_excluirCat = new javax.swing.JButton();
        btn_atualizarCat = new javax.swing.JButton();
        btn_cadastrarCat = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        area_descricaoCat = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        txt_idCat = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fornecedores");
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Cadastrar, Editar ou Excluir Categorias");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Nome:");

        txt_nomeCat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        table_categorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_categorias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_categoriasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_categorias);
        if (table_categorias.getColumnModel().getColumnCount() > 0) {
            table_categorias.getColumnModel().getColumn(0).setResizable(false);
            table_categorias.getColumnModel().getColumn(0).setPreferredWidth(20);
            table_categorias.getColumnModel().getColumn(1).setResizable(false);
            table_categorias.getColumnModel().getColumn(1).setPreferredWidth(150);
            table_categorias.getColumnModel().getColumn(2).setResizable(false);
            table_categorias.getColumnModel().getColumn(2).setPreferredWidth(300);
        }

        btn_limparCat.setText("Limpar e Desselecionar");
        btn_limparCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limparCatActionPerformed(evt);
            }
        });

        btn_excluirCat.setText("Excluir");
        btn_excluirCat.setEnabled(false);
        btn_excluirCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirCatActionPerformed(evt);
            }
        });

        btn_atualizarCat.setText("Atualizar");
        btn_atualizarCat.setEnabled(false);
        btn_atualizarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_atualizarCatActionPerformed(evt);
            }
        });

        btn_cadastrarCat.setText("Cadastrar");
        btn_cadastrarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cadastrarCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_cadastrarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_atualizarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_excluirCat, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_limparCat, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_cadastrarCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_atualizarCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_excluirCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_limparCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Descrição:");

        area_descricaoCat.setColumns(20);
        area_descricaoCat.setRows(5);
        jScrollPane3.setViewportView(area_descricaoCat);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("ID:");

        txt_idCat.setEditable(false);
        txt_idCat.setBackground(new java.awt.Color(204, 204, 204));
        txt_idCat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_nomeCat, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_idCat)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_nomeCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_idCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("Categorias");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Connection getConnection() throws SQLException {
        String username = "root", password = "", port = "3306", mydatabase = "admeletronicos", serverName = "localhost", type = "mysql";

        Connection conn;

        String url = "jdbc:" + type + "://" + serverName + ":" + port + "/" + mydatabase;
        try {
            conn = (Connection) DriverManager.getConnection(url, username, password);
            System.out.println("Conectado com sucesso ao Banco de Dados");
            return conn;
        } catch (SQLException e) {
            System.out.println("Não foi possível conectar ao Banco de Dados \n-->" + e);
            return null;
        }
    }

    public ResultSet retrieveDB(String table, String select, String where, String otherOptions, int limit) throws SQLException {
        if (table == null) {
            table = "categorias";
        }

        if (select == null) {
            select = "*";
        }

        if (where != null) {
            where = "WHERE " + where;
        } else {
            where = "";
        }

        if (otherOptions == null) {
            otherOptions = "";
        }

        String formatedLimit = "";

        if (limit != 0) {
            formatedLimit = "LIMIT " + Integer.toString(limit);
        }

        String query = "SELECT " + select + " FROM " + table + " " + where + " " + otherOptions + " " + formatedLimit;

        System.out.println(query);

        try {
            Connection conn = getConnection();
            Statement querySearch = conn.createStatement();
            ResultSet result = querySearch.executeQuery(query);

            return result;
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
            return null;
        }
    }

    public boolean deleteDB(String table, String where) throws SQLException {
        try {
            String query = "DELETE FROM " + table + " WHERE " + where;
            Connection conn = getConnection();
            Statement deleteSt = conn.createStatement();

            deleteSt.execute(query);

            return true;

        } catch (SQLException e) {
            System.out.println("Erro: " + e);
            return false;
        }
    }

    public boolean updateDB(String table, String[] columns, String[] objeto, String where) throws SQLException {
        if (objeto == null) {
            return false;
        }

        String values = null;

        String sets = "";

        for (int i = 0; i < columns.length; i++) {
            if (sets.equals("")) {
                sets = "`" + columns[i] + "` = '" + objeto[i] + "'";
            } else {
                sets = sets + ", `" + columns[i] + "` = '" + objeto[i] + "'";
            }
        }

        String query = "UPDATE " + table + " SET " + sets + " WHERE " + where;

        System.out.println("Inserir: " + query);

        Connection conn = getConnection();

        Statement insertSt = conn.createStatement();

        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            System.out.println("Erro ao inserir: " + e);
            return false;
        }
    }

    public boolean insertDB(String table, String[] keys, String[] objeto) throws SQLException {
        if (objeto == null) {
            return false;
        }

        String values;
        String columns = String.join("`, `", keys);

        values = String.join("', '", objeto);

        String query = "INSERT INTO " + table + " (`" + columns + "`) VALUES ('" + values + "');";

        System.out.println("Inserir: " + query);

        Connection conn = getConnection();

        Statement insertSt = conn.createStatement();

        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            System.out.println("Erro ao inserir: " + e);
            return false;
        }

    }

    public void updateCategorias() throws SQLException {
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        String query = "SELECT * FROM categorias ORDER BY idCategoria DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        while (table_categorias.getRowCount() > 0) {
            ((DefaultTableModel) table_categorias.getModel()).removeRow(0);
        }

        int columns = colunas.getMetaData().getColumnCount();

        while (colunas.next()) {
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++) {
                row[i - 1] = colunas.getObject(i);
            }
            ((DefaultTableModel) table_categorias.getModel()).insertRow(colunas.getRow() - 1, row);
        }

        table_categorias.setRowSelectionInterval(0, 0);
        txt_idCat.setText(table_categorias.getModel().getValueAt(0, 0).toString());
        btn_atualizarCat.setEnabled(true);
        btn_excluirCat.setEnabled(true);
        btn_cadastrarCat.setEnabled(false);
    }


    private void btn_cadastrarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cadastrarCatActionPerformed
        String nomeCategoria = "", descricaoCategoria = "";

        if (!txt_nomeCat.getText().equals("")) {
            nomeCategoria = txt_nomeCat.getText();
        }

        if (!area_descricaoCat.getText().equals("")) {
            descricaoCategoria = area_descricaoCat.getText();
        }

        String[] values = {nomeCategoria, descricaoCategoria};

        String[] keys = {"nomeCategoria", "descricaoCategoria"};

        //Inserir no banco
        try {
            insertDB("categorias", keys, values);
            updateCategorias();
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }


    }//GEN-LAST:event_btn_cadastrarCatActionPerformed

    private void btn_atualizarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_atualizarCatActionPerformed
        String nomeCategoria = "", descricaoCategoria = "";
        int idCategoria = 0;

        if (!txt_nomeCat.getText().equals("")) {
            nomeCategoria = txt_nomeCat.getText();
        }

        if (!area_descricaoCat.getText().equals("")) {
            descricaoCategoria = area_descricaoCat.getText();
        }

        if (!txt_idCat.getText().equals("")) {
            idCategoria = Integer.valueOf(txt_idCat.getText());
        }

        String[] columns = {"nomeCategoria", "descricaoCategoria"};
        String[] values = {nomeCategoria, descricaoCategoria};

        //Atualizar no Banco
        try {
            updateDB("categorias", columns, values, "idCategoria = " + String.valueOf(idCategoria));
            updateCategorias();
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }

    }//GEN-LAST:event_btn_atualizarCatActionPerformed

    private void btn_excluirCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirCatActionPerformed
        int idCategoria = 0;

        if (!txt_idCat.getText().equals("")) {
            idCategoria = Integer.valueOf(txt_idCat.getText());
        }

        //Excluir
        try {
            deleteDB("categorias", "idCategoria = " + String.valueOf(idCategoria));
            updateCategorias();
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }

    }//GEN-LAST:event_btn_excluirCatActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            String selectCategorias = "idCategoria, nomeCategoria, descricaoCategoria";

            ResultSet result = retrieveDB("categorias", selectCategorias, null, " ORDER BY idCategoria DESC", 0);

            int columns = result.getMetaData().getColumnCount();

            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i);
                }
                ((DefaultTableModel) table_categorias.getModel()).insertRow(result.getRow() - 1, row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CadastroProdutos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void table_categoriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_categoriasMouseClicked
        int row = table_categorias.getSelectedRow();
        TableModel model = table_categorias.getModel();

        String[] categoria = new String[3];

        if (!model.getValueAt(row, 0).toString().equals("")) {
            categoria[0] = model.getValueAt(row, 0).toString();
            categoria[1] = model.getValueAt(row, 1).toString();
            categoria[2] = model.getValueAt(row, 2).toString();

            txt_idCat.setText(categoria[0]);
            txt_nomeCat.setText(categoria[1]);
            area_descricaoCat.setText(categoria[2]);
            btn_atualizarCat.setEnabled(true);
            btn_excluirCat.setEnabled(true);
            btn_cadastrarCat.setEnabled(false);
        }
    }//GEN-LAST:event_table_categoriasMouseClicked

    private void btn_limparCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limparCatActionPerformed
        table_categorias.clearSelection();
        txt_idCat.setText(null);
        txt_nomeCat.setText(null);
        area_descricaoCat.setText(null);
        btn_atualizarCat.setEnabled(false);
        btn_excluirCat.setEnabled(false);
        btn_cadastrarCat.setEnabled(true);
    }//GEN-LAST:event_btn_limparCatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroCategorias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area_descricaoCat;
    private javax.swing.JButton btn_atualizarCat;
    private javax.swing.JButton btn_cadastrarCat;
    private javax.swing.JButton btn_excluirCat;
    private javax.swing.JButton btn_limparCat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable table_categorias;
    private javax.swing.JTextField txt_idCat;
    private javax.swing.JTextField txt_nomeCat;
    // End of variables declaration//GEN-END:variables
}
