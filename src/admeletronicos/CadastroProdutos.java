/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admeletronicos;

import java.sql.*;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Marcelo
 */
public class CadastroProdutos extends javax.swing.JFrame {

    /**
     * Creates new form cadastroProdutos
     */
    public CadastroProdutos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_valor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_quantidade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_cadastrar = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        txt_idProduto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_atualizar = new javax.swing.JButton();
        btn_limpar = new javax.swing.JButton();
        combo_categorias = new javax.swing.JComboBox<>();
        combo_fornecedores = new javax.swing.JComboBox<>();
        btn_novoFornecedor = new javax.swing.JButton();
        btn_novaCategoria = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_produtos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Nome:");

        txt_nome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_nome.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Fornecedor:");

        txt_valor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_valor.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Valor Unit√°rio:");

        txt_quantidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_quantidade.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Quantidade:");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Cadastrar, Editar ou Excluir Produtos");

        btn_cadastrar.setText("Cadastrar");
        btn_cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cadastrarActionPerformed(evt);
            }
        });

        btn_excluir.setText("Excluir");
        btn_excluir.setEnabled(false);
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });

        txt_idProduto.setEditable(false);
        txt_idProduto.setBackground(new java.awt.Color(204, 204, 204));
        txt_idProduto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_idProduto.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("ID do Produto:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Categoria:");

        btn_atualizar.setText("Atualizar Registro");
        btn_atualizar.setEnabled(false);
        btn_atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_atualizarActionPerformed(evt);
            }
        });

        btn_limpar.setText("Limpar e Desselecionar");
        btn_limpar.setToolTipText("");
        btn_limpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limparMouseClicked(evt);
            }
        });

        combo_categorias.setMaximumRowCount(20);
        combo_categorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma Categoria" }));

        combo_fornecedores.setMaximumRowCount(20);
        combo_fornecedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um Fornecedor" }));

        btn_novoFornecedor.setBackground(new java.awt.Color(255, 255, 255));
        btn_novoFornecedor.setText("Novo Fornecedor");
        btn_novoFornecedor.setBorderPainted(false);
        btn_novoFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novoFornecedorActionPerformed(evt);
            }
        });

        btn_novaCategoria.setBackground(new java.awt.Color(255, 255, 255));
        btn_novaCategoria.setText("Nova Categoria");
        btn_novaCategoria.setActionCommand("Nova");
        btn_novaCategoria.setBorderPainted(false);
        btn_novaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novaCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_fornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_novoFornecedor)
                                .addGap(85, 85, 85))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_valor, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(72, 72, 72))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(combo_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_novaCategoria))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_idProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_idProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_fornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_novoFornecedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_novaCategoria))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(224, Short.MAX_VALUE)))
        );

        table_produtos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Categoria", "Quantidade", "Fornecedor", "Valor Unit√°rio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_produtos.setSelectionBackground(new java.awt.Color(51, 51, 51));
        table_produtos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_produtos.getTableHeader().setReorderingAllowed(false);
        table_produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_produtosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_produtos);
        if (table_produtos.getColumnModel().getColumnCount() > 0) {
            table_produtos.getColumnModel().getColumn(0).setResizable(false);
            table_produtos.getColumnModel().getColumn(0).setPreferredWidth(5);
            table_produtos.getColumnModel().getColumn(1).setResizable(false);
            table_produtos.getColumnModel().getColumn(2).setResizable(false);
            table_produtos.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_produtos.getColumnModel().getColumn(3).setResizable(false);
            table_produtos.getColumnModel().getColumn(3).setPreferredWidth(20);
            table_produtos.getColumnModel().getColumn(4).setResizable(false);
            table_produtos.getColumnModel().getColumn(5).setResizable(false);
            table_produtos.getColumnModel().getColumn(5).setPreferredWidth(10);
        }

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Visualizar Produtos Cadastrados");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cadastrarActionPerformed
        //Abertura de um Bloco de Try, para tratar quaisquer erros que apare√ßam
        // no estabelecimento da conex√£o ou nas opera√ß√µes de SQL contidas aqui
        try {
            //Declara√ß√£o de vari√°veis para armazenar os valores do 
            //formul√°rio de cadastro
            String nomeProduto = null, nomeFornecedor = null, nomeCategoria = null;
            int quantiaProduto = 0, idFornecedor = 0, idCategoria = 0;
            double valorProduto = 0.00;

            //Declara√ß√£o de uma vari√°vel dot tipo Connection, que ir√° conter a
            // conex√£o retornada pela fun√ß√£o getConnection()
            Connection conn = getConnection();

            //Atribui√ß√£o dos valores √†s vari√°veis, se o campo correspondente
            // tiver algum valor preenchido
            //Quantidade do Produto
            if (!txt_quantidade.getText().isEmpty()) {
                quantiaProduto = Integer.parseInt(txt_quantidade.getText());
            }

            //Valor Unit√°rio do Produto
            if (!txt_valor.getText().isEmpty()) {
                valorProduto = Double.parseDouble(txt_valor.getText());
            }

            //Nome do Produto
            if (!txt_nome.getText().isEmpty()) {
                nomeProduto = txt_nome.getText();
            }

            //Antes de determinar a Categoria selecionada, verificar se o item
            // selecionado na Combobox n√£o corresponde √† mensagem padr√£o
            //'Selecione uma Categoria'
            if (!combo_categorias.getSelectedItem().toString().equals("Selecione uma Categoria")) {
                nomeCategoria = combo_categorias.getSelectedItem().toString();
                //Utiliza√ß√£o da fun√ß√£o retrieveDB() para obter o ID da categoria
                // selecioada, com base no nome resgatado da Combobox
                ResultSet result = retrieveDB("categorias", "`idCategoria`", "`nomeCategoria` = '" + nomeCategoria + "'", null, 0);
                while (result.next()) {
                    //idCategoria definido como o valor de ID obtido atrav√©s da
                    // fun√ß√£o retrieveDB()
                    idCategoria = result.getInt("idCategoria");
                }
            }

            //Antes de determinar o Fornecedor selecionado, verificar se o item
            // selecionado na Combobox n√£o corresponde √† mensagem padr√£o
            //'Selecione um Fornecedor'
            if (!combo_fornecedores.getSelectedItem().toString().equals("Selecione um Fornecedor")) {
                nomeFornecedor = combo_fornecedores.getSelectedItem().toString();
                //Utiliza√ß√£o da fun√ß√£o retrieveDB() para obter o ID do fornecedor
                // selecioada, com base no nome resgatado da Combobox
                ResultSet result = retrieveDB("fornecedores", "`idFornecedor`", "`nomeFornecedor` = '" + nomeFornecedor + "'", null, 0);
                while (result.next()) {
                    //idFornecedor definido como o valor de ID obtido atrav√©s da
                    // fun√ß√£o retrieveDB()
                    idFornecedor = result.getInt("idFornecedor");
                }
            }

            //Declara√ß√£o e composi√ß√£o do Array de Strings 'produto', que ir√°
            // armazenar as informa√ß√µes a serem inseridas no banco como um novo
            // produto
            String[] produto = new String[5];
            String[] keys = {"nomeProduto", "idCategoria", "quantiaProduto", "idFornecedor", "valorProduto"};

            produto[0] = nomeProduto;
            produto[1] = Integer.toString(idCategoria);
            produto[2] = Integer.toString(quantiaProduto);
            produto[3] = Integer.toString(idFornecedor);
            produto[4] = Double.toString(valorProduto);

            //Declara√ß√£o e atribui√ß√£o de uma vari√°vel para armazenar o retorno
            // da fun√ß√£o insertDB(), que usamos aqui para inserir um novo produto
            boolean resultInsert = insertDB("produtos", keys, produto);

            //Verifica√ß√£o do retorno:
            // true = Produto inserido
            // false = Algo deu errado
            if (resultInsert) {
                //Caso tudo tenha dado certo, atualizamos a tabela de produtos
                // para exibir o que acabou de ser inserido
                updateProdutos();
            }

        } catch (SQLException e) {
            //Caso d√™ algum erro na execu√ß√£o do c√≥digo no bloco Try, o programa
            // pula para c√° e armazena o erro em uma vari√°vel 'e', que ser√°
            // exibida na tela junto da mensagem 'Erro'
            System.out.println("Erro: " + e);
        }

    }//GEN-LAST:event_btn_cadastrarActionPerformed

    //Fun√ß√£o para atualizar a Combobox de Fornecedores
    public void updateFornecedores() throws SQLException {
        //Abre cone√ß√£o e cria um Statement
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        //Comp√µe uma 'query' (uma s√©rie de comandos sql), e armazena o resultado
        // de sua execu√ß√£o em uma vari√°vel 'colunas'
        String query = "SELECT nomeFornecedor FROM fornecedores ORDER BY idFornecedor DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        //Conta o n√∫mero de resultados obtidos
        int columns = colunas.getMetaData().getColumnCount();

        //Remove todos os itens da Combobox Fornecedores, e em seguida adiciona
        // a mensagem padr√£o 'Selecione um Fornecedor'
        combo_fornecedores.removeAllItems();
        combo_fornecedores.addItem("Selecione um Fornecedor");

        //Passa um a um dos resultados obtidos com a query
        while (colunas.next()) {
            //Utiliza um loop 'for' para adicionar os itens √† Combobox
            for (int i = 1; i <= columns; i++) {
                combo_fornecedores.addItem(colunas.getObject(i).toString());
            }
        }

    }

    //Fun√ß√£o para atualizar a Combobox de Categorias
    public void updateCategorias() throws SQLException {
        //Abre conex√£o e cria um Statement
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        //Comp√µe uma query dentro de uma string, e executa suas instru√ß√µes
        String query = "SELECT nomeCategoria FROM categorias ORDER BY idCategoria DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        //Conta os resultados obtidos
        int columns = colunas.getMetaData().getColumnCount();

        //Remove todos os itens da Combobox Categorias, e adiciona a mensagem
        // padr√£o 'Selecione uma Categoria'
        combo_categorias.removeAllItems();
        combo_categorias.addItem("Selecione uma Categoria");

        //Passa por um a um dos resultados obtidos com a query
        while (colunas.next()) {
            //Usa um loop 'for' para adicionar os itens obtidos √† Combobox
            // Categorias
            for (int i = 1; i <= columns; i++) {
                combo_categorias.addItem(colunas.getObject(i).toString());
            }
        }

    }

    //Fun√ß√£o para atualizar a Tabela de Produtos
    public void updateProdutos() throws SQLException {
        //Abre conex√£o a cria um Statement
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        //Comp√µe uma query dentro de uma string, e executa as instru√ß√µes
        // contidas nela, armazenando seu resultado em uma vari√°vel
        String query = "SELECT produtos.idProduto, produtos.nomeProduto, categorias.nomeCategoria AS categoria, produtos.quantiaProduto, fornecedores.nomeFornecedor AS fornecedor, produtos.valorProduto FROM produtos JOIN fornecedores ON fornecedores.idFornecedor = produtos.idFornecedor JOIN categorias ON categorias.idCategoria = produtos.idCategoria ORDER BY idProduto DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        //Remove todas as linhas da Tabela de produtos, um a um
        while (table_produtos.getRowCount() > 0) {
            ((DefaultTableModel) table_produtos.getModel()).removeRow(0);
        }

        //Conta os resultados obtidos com a query
        int columns = colunas.getMetaData().getColumnCount();

        //Passa por todos os itens obtidos com a query, um a um
        while (colunas.next()) {
            //Monta um objeto com os resultados prontos para serem usados
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++) {
                row[i - 1] = colunas.getObject(i);
            }
            //Utiliza os valores preparados, para preencher a tabela 'table_produtos'
            ((DefaultTableModel) table_produtos.getModel()).insertRow(colunas.getRow() - 1, row);
        }

        //Seleciona a linha mais atual da table_produtos, e configura o txt_idProduto.
        //Modifica a disponibilidade dos bot√µes de Atualizar, Excluir e Cadastrar
        table_produtos.setRowSelectionInterval(0, 0);
        txt_idProduto.setText(table_produtos.getModel().getValueAt(0, 0).toString());
        btn_atualizar.setEnabled(true);
        btn_excluir.setEnabled(true);
        btn_cadastrar.setEnabled(false);
    }

    //Fun√ß√£o usada para criar e retornar uma Conex√£o com o banco de dados MySQL
    public Connection getConnection() throws SQLException {
        //Declar√£o e atribui√ß√£o de vari√°veis para armazenar as informa√ß√µes necess√°rias
        // √† conexao com o banco de dados
        String username = "root", password = "", port = "3306", mydatabase = "admeletronicos", serverName = "localhost", type = "mysql";
        Connection conn;
        String url = "jdbc:" + type + "://" + serverName + ":" + port + "/" + mydatabase;

        //Tenta estabelecer conex√£o com o banco, usando os dados informados acima
        try {
            conn = (Connection) DriverManager.getConnection(url, username, password);
            System.out.println("Conectado com sucesso ao Banco de Dados");
            return conn;
        } catch (SQLException e) {
            //Se algo der errado na conex√£o, o sistema armazena o erro e exibe
            // na tela acompanhado de uma mensagem
            System.out.println("N√£o foi poss√≠vel conectar ao Banco de Dados \n-->" + e);
            return null;
        }
    }

    //Fun√ß√£o para resgatar registros do banco de dados
    public ResultSet retrieveDB(String table, String select, String where, String otherOptions, int limit) throws SQLException {

        //Verifica se os par√¢metros solicitados pela fun√ß√£o foram preenchidos
        // e define valores padr√£o, caso contr√°rio
        if (table == null) {
            table = "produtos";
        }

        if (select == null) {
            select = "*";
        }

        if (where != null) {
            where = "WHERE " + where;
        } else {
            where = "";
        }

        if (otherOptions == null) {
            otherOptions = "";
        }

        //Declara uma vari√°vel para armazenar o limite da sele√ß√£o sql em formato String
        String formatedLimit = "";

        //Verifica se o limite informado pelo usu√°rio √© diferente de 0
        if (limit != 0) {
            //Caso o limite seja diferente de 0, o valor informado √© utilizado
            formatedLimit = "LIMIT " + Integer.toString(limit);
        }
        //Em caso contr√°rio, o limite √© ignorado e a query √© composta sem ele

        //Composi√ß√£o da query em uma string
        String query = "SELECT " + select + " FROM " + table + " " + where + " " + otherOptions + " " + formatedLimit;

        //Bloco de try para tratar poss√≠veis erros
        try {
            //Estabelece conex√£o e cria um Statement
            Connection conn = getConnection();
            Statement querySearch = conn.createStatement();
            //Executa a query e armazena o resultado em uma nova vari√°vel
            ResultSet result = querySearch.executeQuery(query);

            //Retorna o resultado da sele√ß√£o
            return result;
        } catch (SQLException e) {
            //Se algo der errado, o sistema lan√ßa o erro para o 'log'
            // e retorna nulo para o usu√°rio
            System.out.println("Erro: " + e);
            return null;
        }
    }

    //Fun√ß√£o utilizada para deletar registros do banco
    public boolean deleteDB(String table, String where) throws SQLException {
        //Bloco de try para tratar poss√≠veis erros
        try {
            //Defini√ß√£o da query para deletar o registro, utilizando a condi√ß√£o
            // informada pelo usu√°rio, como par√¢metro, para selecionar o item
            // a ser deletado
            String query = "DELETE FROM " + table + " WHERE " + where;
            Connection conn = getConnection();
            Statement deleteSt = conn.createStatement();

            //Executa a query
            deleteSt.execute(query);

            //Se o bloco n√£o caiu em erro e n√£o foi redirecionado para o 'catch'
            // retorna 'true' (verdadeiro) para informar o usu√°rio do status da
            // tentativa
            return true;

        } catch (SQLException e) {
            //Se algo der errado, o sistema exibe o erro em uma mensagem, no 'log'
            System.out.println("Erro: " + e);
            return false;
        }
    }

    //Fun√ß√£o utilizada para atualizar um registro o banco de dados
    public boolean updateDB(String table, String[] columns, String[] objeto, String where) throws SQLException {
        //Verifica se o objeto passado pelo usu√°rio como par√¢metro √© igual
        // a nulo, e decide, atrav√©s disso, se a fun√ß√£o continua ou retorna
        // para quem a chamou com status 'false' (falso)
        if (objeto == null) {
            return false;
        }

        //Declara uma vari√°vel para armazenar as colunas a serem alteradas,
        // bem como os valores que receber√£o
        String sets = "";

        //Utiliza o par√¢metro 'columns' para determinar a quantia de colunas a
        // serem alteradas, passa uma auma, adicionando-as e seu novo valor √†
        // vari√°vel 'sets'
        for (int i = 0; i < columns.length; i++) {
            //Verifica se a vari√°vel 'sets' est√° vazia e, nesse caso, n√£o adiciona
            // uma v√≠rgula √† frente do pr√≥ximo valor a ser concatenado com ela
            if (sets.equals("")) {
                sets = "`" + columns[i] + "` = '" + objeto[i] + "'";
            } else {
                //Se 'sets' n√£o estiver vazia, o programa continua adicionando
                // uma v√≠rgula √† frente do novo valor
                sets = sets + ", `" + columns[i] + "` = '" + objeto[i] + "'";
            }
        }

        //Define uma query para atualizar registros no banco, incluindo aqui
        // a vari√°vel 'sets', com as colunas que ter√£o valores alteados, e a 
        // vari√°vel 'where', com a condi√ß√£o utilizada para selecionar os registros
        // a serem alterados
        String query = "UPDATE " + table + " SET " + sets + " WHERE " + where;

        //Abre uma conex√£o com o banco de dados e cria um Statement
        Connection conn = getConnection();
        Statement insertSt = conn.createStatement();

        //Bloco de Try para tratar de poss√≠veis erros durante a execu√ß√£o da query
        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            //Se algo der errado, o programa exibe o erro junto de uma mensagem
            System.out.println("Erro ao inserir: " + e);
            return false;
        }
    }

    //Fun√ß√£o utilizada para inserir registros no banco de dados
    public boolean insertDB(String table, String[] keys, String[] objeto) throws SQLException {
        //Verifica se o par√¢metro 'objeto' (destinado a armazenar os dados do
        // registro a ser inserido) √© nulo
        if (Arrays.toString(objeto).equals("")) {
            return false;
        }

        //Declara uma vari√°vel do tipo String para armazenar a por√ß√£o da query
        // que determina quais valores ser√£o inseridos no banco
        String values;

        //Declara outra vari√°vel para armazenar a por√ß√£o da query que determina
        // quais colunas da tabela selecionada receber√£o valores.
        //Isso √© necess√°rio, pois, campos como ID, por exemplo, recebem valores
        // automaticamente gerados, portanto n√£o s√£o alterados pelo usu√°rio
        String columns = String.join("`, `", keys);

        //Atribui √† vari√°vel 'values' a jun√ß√£o dos itens contidos no par√¢metro
        // 'objeto', um array (matriz) de Strings, inserindo uma v√≠rgula entre
        // esses itens, e colocando cada um entre duas aspas simples, para n√£o
        // confundi-los com c√≥digo na hora de executar a query
        values = String.join("', '", objeto);

        //Composi√ß√£o da query de inser√ß√£o no banco de dados, usando as vari√°veis:
        // table -> passada como par√¢metro da fun√ß√£o, define a tabela a ser usada
        // columns -> declarada dentro da fun√ß√£o, explicada acima
        // values = declarada dentro da fun√ß√£o, explicada acima
        String query = "INSERT INTO " + table + " (`" + columns + "`) VALUES ('" + values + "');";

        //Abre conex√£o com o banco de dados e cria um Statement
        Connection conn = getConnection();
        Statement insertSt = conn.createStatement();

        //Bloco de Try para tratar poss√≠veis erros durante a execu√ß√£o da query
        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            //Se algo der errado, √© exibida a mensagem de erro, semelhante √†
            // das fun√ß√µes anteriores a essa
            System.out.println("Erro ao inserir: " + e);
            return false;
        }

    }

    //Fun√ß√£o executada quando a tela do programa √© aberta
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Bloco de Try para tratar de poss√≠veis erros
        try {
            Connection conn = getConnection();

            // Query para buscar os Produtos no banco.
            // Tamb√©m relacionamos o ID de Fornecedor e ID de Categoria
            // com seus respectivos nomes nas tabelas Fornecedores e Categorias
            String selectProdutos = "produtos.idProduto, produtos.nomeProduto, categorias.nomeCategoria AS categoria, produtos.quantiaProduto, fornecedores.nomeFornecedor AS fornecedor, produtos.valorProduto";
            //Composi√ß√£o do 'JOIN' do MySQL, usado aqui para fazer as associa√ß√µes, citadas acima, funcionarem
            String optionsProdutos = "JOIN fornecedores ON fornecedores.idFornecedor = produtos.idFornecedor JOIN categorias ON categorias.idCategoria = produtos.idCategoria ORDER BY idProduto DESC";

            // Executa a Query dos Produtos e armazena os resultados em um ResultSet
            ResultSet result = retrieveDB("produtos", selectProdutos, null, optionsProdutos, 0);

            //Conta o n√∫mero de resultados obtidos e armazena em uma vari√°vel do tipo int
            int columns = result.getMetaData().getColumnCount();

            //Passa um a um os resultados, e os insere na tabela table_produtos,
            // no formul√°rio
            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i);
                }
                ((DefaultTableModel) table_produtos.getModel()).insertRow(result.getRow() - 1, row);
            }

            //Utiliza a fun√ß√£o retrieveDB() para resgatar, do banco, as categorias
            result = retrieveDB("categorias", "nomeCategoria", null, " ORDER BY idCategoria ASC", 0);

            //Reaproveita a vari√°vel 'columns', dessa vez para contar os resultadoos
            // da busca pelas categorias
            columns = result.getMetaData().getColumnCount();

            //Remove todos os itens da Combobox de categorias, e adiciona o item
            // padr√£o 'Selecione uma Categoria'
            combo_categorias.removeAllItems();
            combo_categorias.addItem("Selecione uma Categoria");

            //Passa um a um os resultados, e os insere na Combobox de categorias
            while (result.next()) {
                for (int i = 1; i <= columns; i++) {
                    combo_categorias.addItem(result.getObject(i).toString());
                }
            }

            //Utiliza a fun√ß√£o retrieveDB() para resgatar, do banco, os fornecedores
            result = retrieveDB("fornecedores", "nomeFornecedor", null, " ORDER BY idFornecedor ASC", 0);

            //Reaproveita a vari√°vel 'columns', dessa vez para contar os resultadoos
            // da busca pelos fornecedores
            columns = result.getMetaData().getColumnCount();

            //Remove todos os itens da Combobox de fornecedores, e adiciona o item
            // padr√£o 'Selecione um Fornecedor'
            combo_fornecedores.removeAllItems();
            combo_fornecedores.addItem("Selecione um Fornecedor");

            //Passa um a um os resultados, e os insere na Combobox de fornecedores
            while (result.next()) {
                for (int i = 1; i <= columns; i++) {
                    combo_fornecedores.addItem(result.getObject(i).toString());
                }
            }

        } catch (SQLException e) {
            //Caso algo d√™ errado o programa lan√ßa no 'log' uma mensagem de erro
            System.out.println("Erro: " + e);
        }


    }//GEN-LAST:event_formWindowOpened

    //Fun√ß√£o executada quando o usu√°rio clica sobre a tabela de produtos
    private void table_produtosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_produtosMouseClicked
        //Declara uma vari√°vel para armazenar o n√∫mero da linha selecionada na
        // tabela, ao clicar
        int row = table_produtos.getSelectedRow();

        //Utiliza uma vari√°vel do tipo TableModel para armazenar a estrutura da
        // tabela dos produtos, no formul√°rio
        TableModel model = table_produtos.getModel();

        //Declara um array (matriz) de Strings, para armazenar os valores de cada
        // coluna da linha selecionada
        String[] produto = new String[6];

        //Verifica se a primeira coluna da linha tem algum valor (logo, n√£o √© uma linha vazia)
        if (!model.getValueAt(row, 0).toString().equals("")) {
            //Se a linha n√£o for vazia, o valor de cada coluna √© atribu√≠do a uma
            // posi√ß√£o do array de Strings 'produto
            // Obs.: A fun√ß√£o toString() converte o valor obtido para o tipo String
            produto[0] = model.getValueAt(row, 0).toString();
            produto[1] = model.getValueAt(row, 1).toString();
            produto[2] = model.getValueAt(row, 2).toString();
            produto[3] = model.getValueAt(row, 3).toString();
            produto[4] = model.getValueAt(row, 4).toString();
            produto[5] = model.getValueAt(row, 5).toString();

            //Atribui aos campos de texto do formul√°rio, os devidos valores:
            // txt_idProduto = coluna 0 (ID)
            txt_idProduto.setText(produto[0]);

            // txt_nome = coluna 1 (Nome)
            txt_nome.setText(produto[1]);

            // combo_categorias = coluna 2 (Categoria)
            combo_categorias.setSelectedItem(produto[2]);

            // txt_quantidade = coluna 3 (Quantia)
            txt_quantidade.setText(produto[3]);

            // combo_fornecedores = coluna 4 (Fornecedor)
            combo_fornecedores.setSelectedItem(produto[4]);

            // combo_fornecedores = coluna 4 (Fornecedor)
            txt_valor.setText(produto[5]);

            //Habilita os bot√µes de Atualizar e Excluir, pois um registro foi selecionado
            btn_atualizar.setEnabled(true);
            btn_excluir.setEnabled(true);

            //Desabilita o bot√£o de Cadastrar
            btn_cadastrar.setEnabled(false);
        }
    }//GEN-LAST:event_table_produtosMouseClicked

    //Fun√ß√£o executada ao clicar no bot√£o 'Limpar e Desselecionar'
    //Define o texto das textboxes como nulo, desabilita os bot√µes de Atualizar
    // e Excluir, habilita o bot√£o de Cadastrar e seleciona os itens padr√£o das
    // Comboboxes de Categorias e Fornecedores
    private void btn_limparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limparMouseClicked
        table_produtos.clearSelection();
        txt_idProduto.setText(null);
        txt_nome.setText(null);
        combo_categorias.setSelectedItem("Selecione uma Categoria");
        txt_quantidade.setText(null);
        combo_fornecedores.setSelectedItem("Selecione um Fornecedor");
        txt_valor.setText(null);
        btn_atualizar.setEnabled(false);
        btn_excluir.setEnabled(false);
        btn_cadastrar.setEnabled(true);
    }//GEN-LAST:event_btn_limparMouseClicked

    //Fun√ß√£o executada ao clicar no bot√£o Atualizar
    private void btn_atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_atualizarActionPerformed
        //Bloco de Try para tratar poss√≠veis erros durante a execu√ß√£o
        try {
            //Declara√ß√£o das vari√°veis para armazenar os valores a serem obtidos
            // dos componentes do formul√°rio
            String nomeProduto = null, nomeFornecedor = null, nomeCategoria = null;
            int quantiaProduto = 0, idFornecedor = 0, idCategoria = 0, idProduto = 0;
            double valorProduto = 0.00;

            //Abre conex√£o com o banco de dados
            Connection conn = getConnection();

            //Atribui√ß√£o dos valores √†s vari√°veis, se o campo correspondente
            // tiver algum valor preenchido
            if (!txt_quantidade.getText().isEmpty()) {
                quantiaProduto = Integer.parseInt(txt_quantidade.getText());
            }

            if (!txt_valor.getText().isEmpty()) {
                valorProduto = Double.parseDouble(txt_valor.getText());
            }

            if (!txt_nome.getText().isEmpty()) {
                nomeProduto = txt_nome.getText();
            }

            if (!txt_idProduto.getText().equals("")) {
                idProduto = Integer.valueOf(txt_idProduto.getText());
            }

            //Verifica se os itens selecionados nas omboboxes de Categoria e Fornecedor
            // n√£o s√£o os itens padr√£o de 'Selecione...', e ent√£o busca o ID
            // do fornecedor/categoria no banco
            if (!combo_categorias.getSelectedItem().equals("Selecione uma Categoria")) {
                nomeCategoria = combo_categorias.getSelectedItem().toString();
                ResultSet result = retrieveDB("categorias", "`idCategoria`", "`nomeCategoria` = '" + nomeCategoria + "'", null, 0);
                while (result.next()) {
                    idCategoria = result.getInt("idCategoria");
                }
            }

            if (!combo_fornecedores.getSelectedItem().equals("Selecione um Fornecedor")) {
                nomeFornecedor = combo_fornecedores.getSelectedItem().toString();
                ResultSet result = retrieveDB("fornecedores", "`idFornecedor`", "`nomeFornecedor` = '" + nomeFornecedor + "'", null, 0);
                while (result.next()) {
                    idFornecedor = result.getInt("idFornecedor");
                }
            }

            //Declara um array de Strings para armazenar as informa√ß√µes do produto
            String[] produto = new String[5];

            //Decalra um arrya de Strings para armazenar as colunas a serem alteradas
            // na tabela do banco de dados
            String[] keys = {"nomeProduto", "idCategoria", "quantiaProduto", "idFornecedor", "valorProduto"};

            //Atribui as informa√ß√µes do produto √†s diferentes posi√ß√µes do array 'prodto'
            produto[0] = nomeProduto;
            produto[1] = Integer.toString(idCategoria);
            produto[2] = Integer.toString(quantiaProduto);
            produto[3] = Integer.toString(idFornecedor);
            produto[4] = Double.toString(valorProduto);

            //Utiliza a fun√ß√£o updateDB() para atualiar o registro no banco e 
            // armazena o resultado em uma vari√°vel boolean (true ou false)
            boolean resultUpdate = updateDB("produtos", keys, produto, "idProduto = " + String.valueOf(idProduto));

            //Verifica se a atualiza√ß√£o retornou true (verdadeiro, ou seja, sucesso)
            // Caso sim, atualiza a tabela de produtos para exibir os novos valores
            if (resultUpdate) {
                updateProdutos();
            }

        } catch (SQLException e) {
            //Se algo der errado, o sistema lan√ßa no 'log' uma mensagem de erro
            System.out.println("Erro: " + e);
        }
    }//GEN-LAST:event_btn_atualizarActionPerformed

    //Fun√ß√£o executada ao clicar no bot√£o 'Novo Fornecedor'
    //Abre o formul√°rio de cria√ß√£o/edi√ß√£o/exclus√£o de fornecedores
    private void btn_novoFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novoFornecedorActionPerformed
        new CadastroFornecedores().setVisible(true);
    }//GEN-LAST:event_btn_novoFornecedorActionPerformed

    //Fun√ß√£o executada ao clicar no bot√£o 'Excluir'
    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        //Declara uma vari√°vel para armazenar o ID do produto a ser exclu√≠do
        int idProduto;

        //Verifica se o valor da txt_idProduto n√£o est√° vazio, ou seja, se h√°
        // um produto selecionado para ser exclu√≠do
        if (!txt_idProduto.getText().equals("")) {
            //Bloco de Try para tratar poss√≠veis erros durante a execu√ß√£o
            try {
                //Resgata, da textbox, o id do produto selecionado
                idProduto = Integer.valueOf(txt_idProduto.getText());
                //Utiliza a fun√ß√£o deleteDB() para excluir o produto do banco,
                // armazenando o resultado em uma vari√°vel do tipo boolean
                boolean resultDelete = deleteDB("produtos", "idProduto = " + idProduto);
                
                //Verifica a exclus√£o sucedeu, ou seja, se a vari√°vel que armazena
                // o retorno da fun√ß√£o deleteDB() tem valor 'true' (verdadeiro)
                if (resultDelete) {
                    //Caso a condi√ß√£o acima seja atendida, executa a fun√ß√£o
                    // updateProdutos(), para atualizar a tabela do formul√°rio
                    updateProdutos();
                }
            } catch (SQLException e) {
                //Se algo der errado, lan√ßa no 'log' uma mensagem de erro
                System.out.println("Erro: " + e);
            }
        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    //Fun√ß√£o executada ao clicar no bot√£o 'Nova Categoria'
    //Abre o formul√°rio de cria√ß√£o/edi√ß√£o/exclus√£o de categorias
    private void btn_novaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novaCategoriaActionPerformed
        new CadastroCategorias().setVisible(true);
    }//GEN-LAST:event_btn_novaCategoriaActionPerformed

    //Fun√ß√£o executada sempre que a tela inicial do programa ganha foco.
    //Por exemplo: Ao minimiz√°-la e abri-la novamente.
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        //Bloco de Try para tratar poss√≠veis erros durante a execu√ß√£o
        try {
            //Executa as duas fun√ß√µes abaixo para atualizar as Comboboxes de
            // Fornecedores e Categorias
            updateFornecedores();
            updateCategorias();
            
            //Obs.: O objetivo disso √©, quando fechada a tela de cria√ß√£o de
            //Fornecedores ou Categorias, o sistema atualizar a lista para incluir
            // poss√≠veis novos registros adicionados
            
        } catch (SQLException e) {
            // Se algo der errado, lan√ßa no console de sa√≠da uma mensagem de erro
            System.out.println("Erro: " + e);
        }
    }//GEN-LAST:event_formWindowGainedFocus

    //Observa√ß√µes finais sobre o c√≥digo:
    // As mensagens de erro s√£o apenas uma forma de testar o c√≥digo, elas n√£o
    // ser√£o exibidas para o usu√°rio, por este ser um software simples
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroProdutos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_atualizar;
    private javax.swing.JButton btn_cadastrar;
    private javax.swing.JButton btn_excluir;
    private javax.swing.JButton btn_limpar;
    private javax.swing.JButton btn_novaCategoria;
    private javax.swing.JButton btn_novoFornecedor;
    private javax.swing.JComboBox<String> combo_categorias;
    private javax.swing.JComboBox<String> combo_fornecedores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_produtos;
    private javax.swing.JTextField txt_idProduto;
    private javax.swing.JTextField txt_nome;
    private javax.swing.JTextField txt_quantidade;
    private javax.swing.JTextField txt_valor;
    // End of variables declaration//GEN-END:variables
}
