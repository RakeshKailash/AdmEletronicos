/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admeletronicos;

import java.sql.*;
import java.util.Arrays;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Marcelo
 */
public class CadastroProdutos extends javax.swing.JFrame {

    /**
     * Creates new form cadastroProdutos
     */
    public CadastroProdutos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_valor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_quantidade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_cadastrar = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        txt_idProduto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_atualizar = new javax.swing.JButton();
        btn_limpar = new javax.swing.JButton();
        combo_categorias = new javax.swing.JComboBox<>();
        combo_fornecedores = new javax.swing.JComboBox<>();
        btn_novoFornecedor = new javax.swing.JButton();
        btn_novaCategoria = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_produtos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Nome:");

        txt_nome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_nome.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Fornecedor:");

        txt_valor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_valor.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Valor Unit√°rio:");

        txt_quantidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_quantidade.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Quantidade:");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Cadastrar, Editar ou Excluir Produtos");

        btn_cadastrar.setText("Cadastrar");
        btn_cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cadastrarActionPerformed(evt);
            }
        });

        btn_excluir.setText("Excluir");
        btn_excluir.setEnabled(false);
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });

        txt_idProduto.setEditable(false);
        txt_idProduto.setBackground(new java.awt.Color(204, 204, 204));
        txt_idProduto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_idProduto.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("ID do Produto:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Categoria:");

        btn_atualizar.setText("Atualizar Registro");
        btn_atualizar.setEnabled(false);
        btn_atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_atualizarActionPerformed(evt);
            }
        });

        btn_limpar.setText("Limpar e Desselecionar");
        btn_limpar.setToolTipText("");
        btn_limpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limparMouseClicked(evt);
            }
        });

        combo_categorias.setMaximumRowCount(20);
        combo_categorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma Categoria" }));

        combo_fornecedores.setMaximumRowCount(20);
        combo_fornecedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um Fornecedor" }));

        btn_novoFornecedor.setBackground(new java.awt.Color(255, 255, 255));
        btn_novoFornecedor.setText("Novo Fornecedor");
        btn_novoFornecedor.setBorderPainted(false);
        btn_novoFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novoFornecedorActionPerformed(evt);
            }
        });

        btn_novaCategoria.setBackground(new java.awt.Color(255, 255, 255));
        btn_novaCategoria.setText("Nova Categoria");
        btn_novaCategoria.setActionCommand("Nova");
        btn_novaCategoria.setBorderPainted(false);
        btn_novaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novaCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_fornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_novoFornecedor)
                                .addGap(85, 85, 85))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_valor, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(72, 72, 72))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(combo_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_novaCategoria))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_idProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_idProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_fornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_novoFornecedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_novaCategoria))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(224, Short.MAX_VALUE)))
        );

        table_produtos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Categoria", "Quantidade", "Fornecedor", "Valor Unit√°rio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_produtos.setSelectionBackground(new java.awt.Color(51, 51, 51));
        table_produtos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_produtos.getTableHeader().setReorderingAllowed(false);
        table_produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_produtosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_produtos);
        if (table_produtos.getColumnModel().getColumnCount() > 0) {
            table_produtos.getColumnModel().getColumn(0).setResizable(false);
            table_produtos.getColumnModel().getColumn(0).setPreferredWidth(5);
            table_produtos.getColumnModel().getColumn(1).setResizable(false);
            table_produtos.getColumnModel().getColumn(2).setResizable(false);
            table_produtos.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_produtos.getColumnModel().getColumn(3).setResizable(false);
            table_produtos.getColumnModel().getColumn(3).setPreferredWidth(20);
            table_produtos.getColumnModel().getColumn(4).setResizable(false);
            table_produtos.getColumnModel().getColumn(5).setResizable(false);
            table_produtos.getColumnModel().getColumn(5).setPreferredWidth(10);
        }

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Visualizar Produtos Cadastrados");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cadastrarActionPerformed
        //Declara√ß√£o de vari√°veis para armazenar os valores do 
        //formul√°rio de cadastro
        try {
            String nomeProduto = null, nomeFornecedor = null, nomeCategoria = null;
            int quantiaProduto = 0, idFornecedor = 0, idCategoria = 0;
            double valorProduto = 0.00;
            Connection conn = getConnection();

            //Atribui√ß√£o dos valores √†s vari√°veis, se o campo correspondente
            // tiver algum valor preenchido
            if (!txt_quantidade.getText().isEmpty()) {
                quantiaProduto = Integer.parseInt(txt_quantidade.getText());
            }

            if (!txt_valor.getText().isEmpty()) {
                valorProduto = Double.parseDouble(txt_valor.getText());
            }

            if (!txt_nome.getText().isEmpty()) {
                nomeProduto = txt_nome.getText();
            }

            if (!combo_categorias.getSelectedItem().toString().equals("Selecione uma Categoria")) {
                nomeCategoria = combo_categorias.getSelectedItem().toString();
                System.out.println("Chegou aqui");
                ResultSet result = retrieveDB("categorias", "`idCategoria`", "`nomeCategoria` = '" + nomeCategoria + "'", null, 0);
                while (result.next()) {
                    idCategoria = result.getInt("idCategoria");
                }
            }

            if (!combo_fornecedores.getSelectedItem().toString().equals("Selecione um Fornecedor")) {
                nomeFornecedor = combo_fornecedores.getSelectedItem().toString();
                ResultSet result = retrieveDB("fornecedores", "`idFornecedor`", "`nomeFornecedor` = '" + nomeFornecedor + "'", null, 0);
                while (result.next()) {
                    idFornecedor = result.getInt("idFornecedor");
                }
            }

            String[] produto = new String[5];
            String[] keys = {"nomeProduto", "idCategoria", "quantiaProduto", "idFornecedor", "valorProduto"};

            produto[0] = nomeProduto;
            produto[1] = Integer.toString(idCategoria);
            produto[2] = Integer.toString(quantiaProduto);
            produto[3] = Integer.toString(idFornecedor);
            produto[4] = Double.toString(valorProduto);

            boolean resultInsert = insertDB("produtos", keys, produto);

            if (resultInsert) {
                updateProdutos();
            }

//            String queryCategoria = "SELECT idCategoria FROM categorias WHERE nomeCategoria = " + nomeCategoria + " LIMIT 1";
            // Executar a Query das Categorias e armazenar os resultados em um ResultSet
            //System.out.println("Nome: " + nomeProduto);
            //System.out.println("Fornecedor: " + nomeFornecedor);
            //System.out.println("Quantia: " + String.valueOf(quantiaProduto));
            //System.out.println("Valor: " + String.valueOf(valorProduto));
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }

    }//GEN-LAST:event_btn_cadastrarActionPerformed

    public void updateFornecedores() throws SQLException {
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        String query = "SELECT nomeFornecedor FROM fornecedores ORDER BY idFornecedor DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        int columns = colunas.getMetaData().getColumnCount();

            combo_fornecedores.removeAllItems();
            combo_fornecedores.addItem("Selecione um Fornecedor");

            while (colunas.next()) {
                for (int i = 1; i <= columns; i++) {
                    combo_fornecedores.addItem(colunas.getObject(i).toString());
                }
            }

    }

    public void updateProdutos() throws SQLException {
        Connection conn = getConnection();
        Statement retrieveStatement = conn.createStatement();

        String query = "SELECT produtos.idProduto, produtos.nomeProduto, categorias.nomeCategoria AS categoria, produtos.quantiaProduto, fornecedores.nomeFornecedor AS fornecedor, produtos.valorProduto FROM produtos JOIN fornecedores ON fornecedores.idFornecedor = produtos.idFornecedor JOIN categorias ON categorias.idCategoria = produtos.idCategoria ORDER BY idProduto DESC";
        ResultSet colunas = retrieveStatement.executeQuery(query);

        while (table_produtos.getRowCount() > 0) {
            ((DefaultTableModel) table_produtos.getModel()).removeRow(0);
        }

        int columns = colunas.getMetaData().getColumnCount();

        while (colunas.next()) {
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++) {
                row[i - 1] = colunas.getObject(i);
            }
            ((DefaultTableModel) table_produtos.getModel()).insertRow(colunas.getRow() - 1, row);
        }

        table_produtos.setRowSelectionInterval(0, 0);
        txt_idProduto.setText(table_produtos.getModel().getValueAt(0, 0).toString());
        btn_atualizar.setEnabled(true);
        btn_excluir.setEnabled(true);
        btn_cadastrar.setEnabled(false);
    }

    public Connection getConnection() throws SQLException {
        String username = "root", password = "", port = "3306", mydatabase = "admeletronicos", serverName = "localhost", type = "mysql";

        Connection conn;

        String url = "jdbc:" + type + "://" + serverName + ":" + port + "/" + mydatabase;
        try {
            conn = (Connection) DriverManager.getConnection(url, username, password);
            System.out.println("Conectado com sucesso ao Banco de Dados");
            return conn;
        } catch (SQLException e) {
            System.out.println("N√£o foi poss√≠vel conectar ao Banco de Dados \n-->" + e);
            return null;
        }
    }

    public ResultSet retrieveDB(String table, String select, String where, String otherOptions, int limit) throws SQLException {
        if (table == null) {
            table = "produtos";
        }

        if (select == null) {
            select = "*";
        }

        if (where != null) {
            where = "WHERE " + where;
        } else {
            where = "";
        }

        if (otherOptions == null) {
            otherOptions = "";
        }

        String formatedLimit = "";

        if (limit != 0) {
            formatedLimit = "LIMIT " + Integer.toString(limit);
        }

        String query = "SELECT " + select + " FROM " + table + " " + where + " " + otherOptions + " " + formatedLimit;

        System.out.println(query);

        try {
            Connection conn = getConnection();
            Statement querySearch = conn.createStatement();
            ResultSet result = querySearch.executeQuery(query);

            return result;
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
            return null;
        }
    }

    public boolean deleteDB(String table, String where) throws SQLException {
        try {
            String query = "DELETE FROM " + table + " WHERE " + where;
            Connection conn = getConnection();
            Statement deleteSt = conn.createStatement();

            deleteSt.execute(query);

            return true;

        } catch (SQLException e) {
            System.out.println("Erro: " + e);
            return false;
        }
    }

    public boolean updateDB(String table, String[] columns, String[] objeto, String where) throws SQLException {
        if (objeto == null) {
            return false;
        }

        String values = null;

        String sets = "";

        for (int i = 0; i < columns.length; i++) {
            if (sets.equals("")) {
                sets = "`" + columns[i] + "` = '" + objeto[i] + "'";
            } else {
                sets = sets + ", `" + columns[i] + "` = '" + objeto[i] + "'";
            }
        }

        String query = "UPDATE " + table + " SET " + sets + " WHERE " + where;

        System.out.println("Inserir: " + query);

        Connection conn = getConnection();

        Statement insertSt = conn.createStatement();

        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            System.out.println("Erro ao inserir: " + e);
            return false;
        }
    }

    public boolean insertDB(String table, String[] keys, String[] objeto) throws SQLException {
        if (objeto == null) {
            return false;
        }

        String values = null;
        String columns = String.join("`, `", keys);

        values = String.join("', '", objeto);

        String query = "INSERT INTO " + table + " (`" + columns + "`) VALUES ('" + values + "');";

        System.out.println("Inserir: " + query);

        Connection conn = getConnection();

        Statement insertSt = conn.createStatement();

        try {
            insertSt.executeUpdate(query);
            System.out.println("Item inserido com sucesso!");
            return true;
        } catch (SQLException e) {
            System.out.println("Erro ao inserir: " + e);
            return false;
        }

    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            Connection conn = null;
            conn = getConnection();

            // Query para buscar os Produtos no banco.
            // Tamb√©m relacionamos o ID de Fornecedor e ID de Categoria
            // com seus respectivos nomes nas tabelas Fornecedores e Categorias
            String selectProdutos = "produtos.idProduto, produtos.nomeProduto, categorias.nomeCategoria AS categoria, produtos.quantiaProduto, fornecedores.nomeFornecedor AS fornecedor, produtos.valorProduto";
            String optionsProdutos = "JOIN fornecedores ON fornecedores.idFornecedor = produtos.idFornecedor JOIN categorias ON categorias.idCategoria = produtos.idCategoria ORDER BY idProduto DESC";

            // Executar a Query dos Produtos e armazenar os resultados em um ResultSet
            ResultSet result = retrieveDB("produtos", selectProdutos, null, optionsProdutos, 0);

            int columns = result.getMetaData().getColumnCount();

            while (result.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = result.getObject(i);
                }
                ((DefaultTableModel) table_produtos.getModel()).insertRow(result.getRow() - 1, row);
            }
//            }

            result = retrieveDB("categorias", "nomeCategoria", null, " ORDER BY idCategoria ASC", 0);

            columns = result.getMetaData().getColumnCount();

            combo_categorias.removeAllItems();
            combo_categorias.addItem("Selecione uma Categoria");

            while (result.next()) {
                for (int i = 1; i <= columns; i++) {
                    combo_categorias.addItem(result.getObject(i).toString());
                }
            }

            result = retrieveDB("fornecedores", "nomeFornecedor", null, " ORDER BY idFornecedor ASC", 0);

            columns = result.getMetaData().getColumnCount();

            combo_fornecedores.removeAllItems();
            combo_fornecedores.addItem("Selecione um Fornecedor");

            while (result.next()) {
                for (int i = 1; i <= columns; i++) {
                    combo_fornecedores.addItem(result.getObject(i).toString());
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(CadastroProdutos.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_formWindowOpened

    private void table_produtosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_produtosMouseClicked
        int row = table_produtos.getSelectedRow();
        TableModel model = table_produtos.getModel();

        String[] produto = new String[6];

        if (!model.getValueAt(row, 0).toString().equals("")) {
            produto[0] = model.getValueAt(row, 0).toString();
            produto[1] = model.getValueAt(row, 1).toString();
            produto[2] = model.getValueAt(row, 2).toString();
            produto[3] = model.getValueAt(row, 3).toString();
            produto[4] = model.getValueAt(row, 4).toString();
            produto[5] = model.getValueAt(row, 5).toString();

            txt_idProduto.setText(produto[0]);
            txt_nome.setText(produto[1]);
            combo_categorias.setSelectedItem(produto[2]);
            txt_quantidade.setText(produto[3]);
            combo_fornecedores.setSelectedItem(produto[4]);
            txt_valor.setText(produto[5]);
            btn_atualizar.setEnabled(true);
            btn_excluir.setEnabled(true);
            btn_cadastrar.setEnabled(false);
        }
    }//GEN-LAST:event_table_produtosMouseClicked

    private void btn_limparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limparMouseClicked
        table_produtos.clearSelection();
        txt_idProduto.setText(null);
        txt_nome.setText(null);
        combo_categorias.setSelectedItem("Selecione uma Categoria");
        txt_quantidade.setText(null);
        combo_fornecedores.setSelectedItem("Selecione um Fornecedor");
        txt_valor.setText(null);
        btn_atualizar.setEnabled(false);
        btn_excluir.setEnabled(false);
        btn_cadastrar.setEnabled(true);
    }//GEN-LAST:event_btn_limparMouseClicked

    private void btn_atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_atualizarActionPerformed
        try {
            String nomeProduto = null, nomeFornecedor = null, nomeCategoria = null;
            int quantiaProduto = 0, idFornecedor = 0, idCategoria = 0, idProduto = 0;
            double valorProduto = 0.00;
            Connection conn = getConnection();

            //Atribui√ß√£o dos valores √†s vari√°veis, se o campo correspondente
            // tiver algum valor preenchido
            if (!txt_quantidade.getText().isEmpty()) {
                quantiaProduto = Integer.parseInt(txt_quantidade.getText());
            }

            if (!txt_valor.getText().isEmpty()) {
                valorProduto = Double.parseDouble(txt_valor.getText());
            }

            if (!txt_nome.getText().isEmpty()) {
                nomeProduto = txt_nome.getText();
            }

            if (!combo_categorias.getSelectedItem().toString().equals("Selecione uma Categoria")) {
                nomeCategoria = combo_categorias.getSelectedItem().toString();
                ResultSet result = retrieveDB("categorias", "`idCategoria`", "`nomeCategoria` = '" + nomeCategoria + "'", null, 0);
                while (result.next()) {
                    idCategoria = result.getInt("idCategoria");
                }
            }

            if (!combo_fornecedores.getSelectedItem().toString().equals("Selecione um Fornecedor")) {
                nomeFornecedor = combo_fornecedores.getSelectedItem().toString();
                ResultSet result = retrieveDB("fornecedores", "`idFornecedor`", "`nomeFornecedor` = '" + nomeFornecedor + "'", null, 0);
                while (result.next()) {
                    idFornecedor = result.getInt("idFornecedor");
                }
            }

            if (!txt_idProduto.getText().toString().equals(null)) {
                idProduto = Integer.valueOf(txt_idProduto.getText());
            }

            String[] produto = new String[5];
            String[] keys = {"nomeProduto", "idCategoria", "quantiaProduto", "idFornecedor", "valorProduto"};

            produto[0] = nomeProduto;
            produto[1] = Integer.toString(idCategoria);
            produto[2] = Integer.toString(quantiaProduto);
            produto[3] = Integer.toString(idFornecedor);
            produto[4] = Double.toString(valorProduto);

            boolean resultUpdate = updateDB("produtos", keys, produto, "idProduto = " + String.valueOf(idProduto));

            if (resultUpdate) {
                updateProdutos();
            }

        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }
    }//GEN-LAST:event_btn_atualizarActionPerformed

    private void btn_novoFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novoFornecedorActionPerformed
        new CadastroFornecedores().setVisible(true);
    }//GEN-LAST:event_btn_novoFornecedorActionPerformed

    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        int idProduto = 0;

        if (txt_idProduto.getText().toString().equals(null)) {
            System.out.println("N√£o √© poss√≠vel excluir um Produto sem informar um ID");
        } else {
            try {
                idProduto = Integer.valueOf(txt_idProduto.getText());
                boolean resultDelete = deleteDB("produtos", "idProduto = " + idProduto);
                if (resultDelete) {
                    updateProdutos();
                }
            } catch (SQLException e) {
                System.out.println("Erro: " + e);
            }

        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    private void btn_novaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novaCategoriaActionPerformed
        new CadastroCategorias().setVisible(true);
    }//GEN-LAST:event_btn_novaCategoriaActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        System.out.println("√ì, mecheu!");
        try {
            updateProdutos();
            updateFornecedores();
        } catch (SQLException e) {
            System.out.println("Erro: " + e);
        }
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroProdutos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_atualizar;
    private javax.swing.JButton btn_cadastrar;
    private javax.swing.JButton btn_excluir;
    private javax.swing.JButton btn_limpar;
    private javax.swing.JButton btn_novaCategoria;
    private javax.swing.JButton btn_novoFornecedor;
    private javax.swing.JComboBox<String> combo_categorias;
    private javax.swing.JComboBox<String> combo_fornecedores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_produtos;
    private javax.swing.JTextField txt_idProduto;
    private javax.swing.JTextField txt_nome;
    private javax.swing.JTextField txt_quantidade;
    private javax.swing.JTextField txt_valor;
    // End of variables declaration//GEN-END:variables
}
